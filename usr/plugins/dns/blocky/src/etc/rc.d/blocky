#!/bin/sh

# PROVIDE: blocky
# REQUIRE: DAEMON NETWORKING
# KEYWORD: shutdown
#
# Add the following to /etc/rc.conf[.local] to enable this service
#
# blocky_enable (bool):	Set to NO by default.
#			Set it to YES to enable blocky.
# BLOCKY_CONFIG (str):	Set to /usr/local/etc/blocky-config.yml by default.
#			Set it to a path to use that config file.
# BLOCKY_CONFIG_SAMPLE: Set to /usr/local/etc/blocky-config-sample.yml by default
#			Set it to a path to use sample config file.
# BLOCKY_USER (str):	Services run as root by default. Set to a user name
#			to run blocky as that user. Note: non-root users
#			might need permission to bind to ports.
# BLOCKY_GROUP (str):	Set to the user's primary group by default.
#			Set it to a group name for daemon file ownership.
# BLOCKY_FLAGS (str):	Enter extra flags to append to the blocky command.
#!/bin/sh

. /etc/rc.subr

BLOCKY_NAME=blocky
rcvar=blocky_enable

load_rc_config ${BLOCKY_NAME}


: ${blocky_enable:=NO}
: ${BLOCKY_CONFIG:="/usr/local/etc/blocky/config.yml"}
: ${BLOCKY_GROUP:=}
: ${BLOCKY_FLAGS:=}
: ${BLOCKY_CONFIG_SAMPLE:="/usr/local/etc/blocky/config.yml.sample"}

BLOCKY_LOGFILE="/var/log/blocky/${BLOCKY_NAME}.log"
BLOCKY_PIDFILE="/var/run/${BLOCKY_NAME}.pid"
BLOCKY_PATH="/usr/local/bin/blocky"

if [ -n "${BLOCKY_USER}" ] && [ -z "${BLOCKY_GROUP}" ]; then
	# Detect the daemon user's primary group
	BLOCKY_GROUP=$(id -gn "${BLOCKY_USER}")
fi


command="/usr/sbin/daemon"
#procname="/usr/local/bin/blocky"
procname=${BLOCKY_PATH}
command_args="-c -f -o ${BLOCKY_LOGFILE} -p ${BLOCKY_PIDFILE} ${BLOCKY_PATH} -c ${BLOCKY_CONFIG} ${BLOCKY_FLAGS}"

start_precmd="blocky_precmd"
# Sets up a BLOCKY_PIDFILE the daemon user can access
blocky_precmd()
{
	install -o "${BLOCKY_USER:-root}" -g "${BLOCKY_GROUP:-wheel}" -m 0600 /dev/null "${BLOCKY_PIDFILE}"
}


status_cmd=blocky_status
blocky_status()
{
	if [ -n "$rc_pid" ]; then
		echo "${BLOCKY_NAME} [OPNsense plugin] is running as pid $rc_pid."
		return 0
	else
		echo "${BLOCKY_NAME} is not running."
  fi
}

#stop_cmd="killall blocky"
stop_cmd=blocky_stop
blocky_stop()
{
	killall ${BLOCKY_NAME}
}


# Create blocky-config from sample, else do not overwrite existing
if [ -f "${BLOCKY_CONFIG}" ]; then
  # If blocky config file exists, then do not overwrite; do nothing !
 else
  # If no blocky config file found; assume a new install; copy sample as config file 
  cp "${BLOCKY_CONFIG_SAMPLE}" "${BLOCKY_CONFIG}";
fi

run_rc_command "$1"
